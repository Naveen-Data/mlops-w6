name: ML Pipeline CI/CD

on:
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  ARTIFACT_REGISTRY_LOCATION: ${{ secrets.ARTIFACT_REGISTRY_LOCATION }} 
  ARTIFACT_REGISTRY_REPO: ${{ secrets.ARTIFACT_REGISTRY_REPO }}

jobs:
  Build-and-Deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'write'
      id-token: 'write'
      issues: 'write'
      pull-requests: 'write'

    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Install gke-gcloud-auth-plugin
      run: gcloud components install gke-gcloud-auth-plugin --quiet
    
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip -q
        pip install -r requirements.txt -q
        
    - name: Running train.py
      run: |
        python train.py

    - name: Configure Docker
      run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev --quiet

    - name: Build and Push Docker image
      id: build-image
      run: |
        # Sanitize variables to remove any invisible characters, newlines, or carriage returns
        LOCATION_CLEAN=$(echo -n "${{ env.ARTIFACT_REGISTRY_LOCATION }}" | tr -d '\n\r\t[:space:]')
        PROJECT_ID_CLEAN=$(echo -n "${{ env.GCP_PROJECT_ID }}" | tr -d '\n\r\t[:space:]')
        REPO_CLEAN=$(echo -n "${{ env.ARTIFACT_REGISTRY_REPO }}" | tr -d '\n\r\t[:space:]')

        # Check if any of the essential variables are empty
        if [ -z "$LOCATION_CLEAN" ] || [ -z "$PROJECT_ID_CLEAN" ] || [ -z "$REPO_CLEAN" ]; then
          echo "Error: One or more required environment variables (ARTIFACT_REGISTRY_LOCATION, GCP_PROJECT_ID, ARTIFACT_REGISTRY_REPO) are not set."
          exit 1
        fi

        IMAGE_NAME="${LOCATION_CLEAN}-docker.pkg.dev/${PROJECT_ID_CLEAN}/${REPO_CLEAN}/iris-classifier:${{ github.sha }}"
        
        echo "Building image with sanitized name: $IMAGE_NAME"

        docker build -t $IMAGE_NAME .
        docker push $IMAGE_NAME
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT


    - name: Deploy to GKE
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER_NAME --zone $GKE_ZONE
        sed -i "s|DOCKER_IMAGE_PLACEHOLDER|${{ steps.build-image.outputs.IMAGE_NAME }}|g" cluster/deploy.yml
        kubectl apply -f cluster/deploy.yml
        kubectl apply -f cluster/service.yml
        kubectl rollout status deployment/iris-classifier-deployment --timeout=300s


    - name: Run Locust Load Test
      run: |
        pip install locust -q
    
        echo "Waiting for external IP..."
        SERVICE_IP=""
        for i in {1..30}; do
          SERVICE_IP=$(kubectl get service iris-classifier-service --output=jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [ -n "$SERVICE_IP" ]; then
            echo "External IP found: $SERVICE_IP"
            break
          fi
          echo "Still waiting..."
          sleep 10
        done
    
        if [ -z "$SERVICE_IP" ]; then
          echo "Error: Timed out waiting for external IP."
          exit 1
        fi
    
        echo "Waiting for app to be ready..."
        STATUS_CODE=""
        for i in {1..30}; do
          STATUS_CODE=$(curl --retry 5 --retry-delay 2 --connect-timeout 2 -s -o /dev/null -w "%{http_code}" http://$SERVICE_IP/)
          if [ "$STATUS_CODE" -eq 200 ]; then
            echo "✅ App is ready at http://$SERVICE_IP"
            break
          fi
          echo "⏳ App not ready yet (HTTP $STATUS_CODE)... retrying..."
          sleep 5
        done
    
        if [ "$STATUS_CODE" -ne 200 ]; then
          echo "❌ App failed to respond with 200 OK after waiting. Exiting."
          exit 1
        fi
    
        echo "🚀 Running Locust test..."
        locust -f locust/locust.py \
          --headless \
          --users 10 \
          --spawn-rate 2 \
          --run-time 1m \
          --host http://$SERVICE_IP \
          --csv locust_report
    
        echo "### 🧪 Locust Load Test Summary" >> report.md
        echo "\`\`\`" >> report.md
        cat locust_report_stats.csv | head -n 10 >> report.md
        echo "\`\`\`" >> report.md

        - name: Commit Locust Report
          run: |
            git config --global user.email "actions@github.com"
            git config --global user.name "GitHub Actions"
            git add report.md
            git commit -m "Add Locust report"
            git push

    
